#!/bin/sh
#
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Redirect output to stderr.
exec 1>&2

# "readlink" executable
if [ `uname` == 'Darwin' ]; then
    # greadlink from coreutils
    READLINK="greadlink"
else
    READLINK="readlink"
fi

# Script directory
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]
do 
    SOURCE="$("$READLINK" "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# List all hooks and run them sequentially
for hook in `ls $DIR/hook-*.sh`; do
    if [ ! -x $hook ]; then
        echo "Skipping hook '$hook' because it is not executable."
    else
        $hook
        if [ $? -ne 0 ]; then
            # Hook failed
            
            echo
            echo "One of the pre-commit hooks failed. You have to make "
            echo "some additional fixes before your changes can be committed."
            echo "If you're using Git (git-svn) and you are absolutely sure "
            echo "that your commit is fine as-is, repeat the commit with the "
            echo "--no-verify option."

            exit 1
        fi

    fi
done

# If none of the hooks have exited by now with a non-zero status, things should be fine.
exit 0
