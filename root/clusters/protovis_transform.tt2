<div id='transform'>
  <script type="text/javascript+protovis">
  
  var cluster_map_id = [% cluster_map.media_cluster_maps_id %];
  var data = [% cluster_map.json %];
  var clusters = data.clusters;
  var sets = data.sets;
  var nodes = data.nodes;
  var index = 0;
  data.nodes.map(function(node) { node.index = index++; });
  
  var info = {
    index: 0,
    display: false,
    x: 0,
    y: 0,
    color: "black",
    name: "Select a node to see its info",
    url: "http://example.com/",
    cluster: "cluster"
  };
  
  var render = function(d) {
    info.index = d.index;
    info.name = d.name;
    info.url = d.url || '';
    info.x = d.x;
    info.y = d.y;
    info.color = d.color;
    if ( d.clusters_id > 0 ) {
        info.cluster = clusters.filter(function(c) { return c.clusters_id == d.clusters_id })[0].name;
    } else {
        info.cluster = '';
    }
    
    info.display = true;
    
    vis.render();
  }

  /* Sizing parameters and scales. */
  var w = 900,
      h = 500,
      ky = 12,
      kx = (w / h) * ky,
      x = pv.Scale.linear(-kx, kx).range(0, w),
      y = pv.Scale.linear(-ky, ky).range(0, h)
      ;

  /* The root panel. */
  var vis = new pv.Panel()
      //.overflow("hidden")
      .width(w)
      .height(h)
      .top(30)
      .left(40)
      .right(20)
      .bottom(20)
      .strokeStyle("#aaa")
      // .events("all")
      // .event("mousemove", pv.Behavior.point())
      ;
        
/*  var lines =  vis.add(pv.Panel)
      .data(links)
    .add(pv.Line)
      .data( function(d) d )
      .left( function(node) x(nodes[node].x) )
      .top(  function(node) y(nodes[node].y) ) 
      .lineWidth(0.15)
      .strokeStyle("gray")
  ;
*/
  /* Use an invisible panel to capture pan & zoom events. */
  vis.add(pv.Panel)
    .events("all")
    .event("mousedown", pv.Behavior.pan())
    .event("mousewheel", pv.Behavior.zoom())
    .event("pan", transform)
    .event("zoom", transform)
    ;
      
  
  /* The dot plot. */
  var dots = vis.add(pv.Panel)
      .overflow("hidden")
      .data(nodes)
    .add(pv.Dot)
      .shape(function(d) d.shape)
      .left(function(d) x(d.x))
      .top(function(d) y(d.y))
      .def("active", false)
      .radius(function() this.active() ? 10 : 5 ) // this.scale)
      .fillStyle(function(d) d.color)
      .strokeStyle(function() this.fillStyle().darker())
      .cursor("pointer")
      .events("all")
      .event("click", function(d) window.open(d.url) )
      .event("mouseover", function(d) {
        this.active(true);
        render(d);
        } )
      .event("mouseout", function(d) {
          this.active(false);
          info.display = false;
          vis.render(); 
        } )
      ;

  // The legend
  var legend = vis.add(pv.Panel)
      .data(clusters)
      .left(0)
      .bottom(0)
      .width(100)
      .height(15 * (clusters.length + 1))
      // .strokeStyle("#ddd")
      
    .add(pv.Dot)
      .left(15)
      .bottom(function(c) (c.i + 1) * 15)
      .fillStyle(function(c) c.color)
      .strokeStyle(function() this.fillStyle().darker())
      .anchor("right")
      .add(pv.Label)
        .text(function(c) c.name)
        .textStyle(function(c) c.color)
      ;
  
  // The shape_legend
  var shape_legend = vis.add(pv.Panel)
      .data(sets)
      .right(0)
      .bottom(0)
      .width(100)
      .height(15 * (sets.length + 1))
      // .strokeStyle("#ddd")

    .add(pv.Dot)
      .shape(function(s) s.shape)
      .strokeStyle("rgb(0,0,0")
      .left(15)
      .bottom(function(s) (s.i + 1) * 15)
      .anchor("right")
      .add(pv.Label)
        .text(function(s) s.name)
      ;

  // labels over every cluster
  var labels = vis.add(pv.Panel)
    .data(clusters)
    .left(function(d) x(d.x) )
    .top(function(d) y(d.y))
    .add(pv.Label)
      .text(function(d) d.name)
      .font("bold 11px sans-serif")
      .textStyle(function(c) c.color)
    ;
    
  
  // Info about the current node
  var current = vis.add(pv.Panel)
      .visible(function() info.display )
      .left(function() x(info.x) + 7)
      .top(function() y(info.y) + 7)
      .width(function() pv.max([info.url.length, info.name.length]) * 7)
      .height(60)
      .fillStyle("lightGray")
    .add(pv.Label)
      .text(function() info.cluster)
      .bottom(10)
      .left(10)
    .add(pv.Label)
      .text(function() info.url)
      .bottom(25)
      .left(10)
    .add(pv.Label)
      .text(function() info.name)
      .bottom(40)
      .left(10)
    ;
  
  /** Update the x- and y-scale domains per the new transform. */
  function transform() {
    var t = this.transform().invert();
    x.domain(t.x / w * 2 * kx - kx, (t.k + t.x / w) * 2 * kx - kx);
    y.domain(t.y / h * 2 * ky - ky, (t.k + t.y / h) * 2 * ky - ky);
    vis.render();
  }

  vis.render();

  </script>
</div>