#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift_solr::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift_solr::SolrService_media_counts_args;
use base qw(Class::Accessor);
thrift_solr::SolrService_media_counts_args->mk_accessors( qw( q facet_field fq mincount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{q} = undef;
  $self->{facet_field} = undef;
  $self->{fq} = undef;
  $self->{mincount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{q}) {
      $self->{q} = $vals->{q};
    }
    if (defined $vals->{facet_field}) {
      $self->{facet_field} = $vals->{facet_field};
    }
    if (defined $vals->{fq}) {
      $self->{fq} = $vals->{fq};
    }
    if (defined $vals->{mincount}) {
      $self->{mincount} = $vals->{mincount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SolrService_media_counts_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{q});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{facet_field});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size0 = 0;
          $self->{fq} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $xfer += $input->readString(\$elem5);
            push(@{$self->{fq}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{mincount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SolrService_media_counts_args');
  if (defined $self->{q}) {
    $xfer += $output->writeFieldBegin('q', TType::STRING, 1);
    $xfer += $output->writeString($self->{q});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{facet_field}) {
    $xfer += $output->writeFieldBegin('facet_field', TType::STRING, 2);
    $xfer += $output->writeString($self->{facet_field});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fq}) {
    $xfer += $output->writeFieldBegin('fq', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{fq}}));
      {
        foreach my $iter6 (@{$self->{fq}}) 
        {
          $xfer += $output->writeString($iter6);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mincount}) {
    $xfer += $output->writeFieldBegin('mincount', TType::I32, 4);
    $xfer += $output->writeI32($self->{mincount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift_solr::SolrService_media_counts_result;
use base qw(Class::Accessor);
thrift_solr::SolrService_media_counts_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SolrService_media_counts_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size7 = 0;
          $self->{success} = {};
          my $_ktype8 = 0;
          my $_vtype9 = 0;
          $xfer += $input->readMapBegin(\$_ktype8, \$_vtype9, \$_size7);
          for (my $_i11 = 0; $_i11 < $_size7; ++$_i11)
          {
            my $key12 = '';
            my $val13 = 0;
            $xfer += $input->readString(\$key12);
            $xfer += $input->readI32(\$val13);
            $self->{success}->{$key12} = $val13;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SolrService_media_counts_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::I32, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter14,$viter15) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter14);
          $xfer += $output->writeI32($viter15);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift_solr::SolrServiceIf;

use strict;


sub media_counts{
  my $self = shift;
  my $q = shift;
  my $facet_field = shift;
  my $fq = shift;
  my $mincount = shift;

  die 'implement interface';
}

package thrift_solr::SolrServiceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub media_counts{
  my ($self, $request) = @_;

  my $q = ($request->{'q'}) ? $request->{'q'} : undef;
  my $facet_field = ($request->{'facet_field'}) ? $request->{'facet_field'} : undef;
  my $fq = ($request->{'fq'}) ? $request->{'fq'} : undef;
  my $mincount = ($request->{'mincount'}) ? $request->{'mincount'} : undef;
  return $self->{impl}->media_counts($q, $facet_field, $fq, $mincount);
}

package thrift_solr::SolrServiceClient;


use base qw(thrift_solr::SolrServiceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub media_counts{
  my $self = shift;
  my $q = shift;
  my $facet_field = shift;
  my $fq = shift;
  my $mincount = shift;

    $self->send_media_counts($q, $facet_field, $fq, $mincount);
  return $self->recv_media_counts();
}

sub send_media_counts{
  my $self = shift;
  my $q = shift;
  my $facet_field = shift;
  my $fq = shift;
  my $mincount = shift;

  $self->{output}->writeMessageBegin('media_counts', TMessageType::CALL, $self->{seqid});
  my $args = new thrift_solr::SolrService_media_counts_args();
  $args->{q} = $q;
  $args->{facet_field} = $facet_field;
  $args->{fq} = $fq;
  $args->{mincount} = $mincount;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_media_counts{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new thrift_solr::SolrService_media_counts_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "media_counts failed: unknown result";
}
package thrift_solr::SolrServiceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_media_counts {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new thrift_solr::SolrService_media_counts_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new thrift_solr::SolrService_media_counts_result();
    $result->{success} = $self->{handler}->media_counts($args->q, $args->facet_field, $args->fq, $args->mincount);
    $output->writeMessageBegin('media_counts', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
