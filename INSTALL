These are very brief, likely incomplete, installation instructions.  If you
want to install the system, follow these instructions as they are and
send any questions to info@mediacloud.org.

These instructions assume comfort with postgresql and especially with perl. You
will have a difficult time installing the system if you do not have experience
with perl and cpan. These instructions have only been tested on Ubuntu Linux.

* Install postgresql (8.4 or greater).  Make sure that plperl support
  is included in your postgresql installation, or install the necessary
  addon packages for it.  E.g. on Ubuntu run: 
  	sudo apt-get install postgresql-8.4;
	sudo apt-get install postgresql-plperl-8.4;
	sudo apt-get install postgresql-server-dev-8.4;

   (The postgresql server dev package is needed by some of the perl modules that mediacloud depends on.)

* Create a postgres database and user.  The database user must be a superuser
  to run some of the plperl procedural scripts. Run the following commands:
     sudo su -
     su - postgres
     createuser -s mediaclouduser --pwprompt 
     createdb --owner mediaclouduser mediacloud
     exit
     exit

* Copy mediawords.yml.dist to mediawords.yml.

* Fill in the database section in mediawords.yml with the connection information for the database you created above

* OPTIONAL: Edit the other sections of mediawords.yml to suit your local
  configuration.  NOTE THAT if you uncomment a suboption, you also need to uncomment the parent option.  For example, if you uncomment 'default_tag_module', you should also uncomment 'mediawords'.
  
* OPTIONAL: If you want to use calais tagging, you'll need to apply for a calais key 
  and enter the key into mediawords.yml.  Then change 'NYTTopics' for the
  default_tag_modules setting to 'NYTTopics Calais',

* IMPORTANT: On Ubuntu you must install a number of packages. Run the following command to install these packages:
      sudo apt-get install expat libexpat1-dev libxml2-dev libdb-dev libtest-www-mechanize-perl libtidy-dev  libopengl-perl libgraph-writer-graphviz-perl libgraphviz-perl graphviz graphviz-dev graphviz-doc libgraphviz-dev libyaml-syck-perl liblist-allutils-perl liblist-moreutils-perl libreadonly-perl  libreadonly-xs-perl

* Configure cpan on your system if you have not already done so. As root, run the following cpan command and answer the configuration questions. You should generally just be able to accept the defaults. Once you get to a CPAN prompt, just type 'exit':
  	    sudo -u root -H cpan

* Install system wide Perl modules that are needed for the pg/plperl stored procedures by CDing to the directory where mediacloud is located and running the following commands:
     sudo -u root -H cpan -v
     cat lib/MediaWords/Pg/DependsList.pm | grep -v '#' | grep -v MediaWords | grep '^use' | grep -v 'strict;' | grep -v 'HTML::StripPP' | sed -e 's/^use //' | sed -e 's/ qw.*//' | sed -e 's/;$//' | xargs -n 1 sudo -n -u root -H cpan install

*  Run the install_mc_perlbrew_and_modules.sh script. This scripts installs Perlbrew, carton and the required modules. I.E. simply CD to the base directory of mediacloud and run the following. Note that the script will take a long time to complete:
     ./install_mc_perlbrew_and_modules.sh

* SUGGESTED: Verify that the necessary modules are installed. Run the media cloud coverage test to verify that all required modules have been installed. Run:
      source
      carton exec -Ilib/ -- prove -r t/compile.t

If there are errors determine which modules are missing and install them by running carton install.

* Run ./script/mediawords_create_db.pl.  This will create create the necessary database tables and procedures within the database you specified above.  Answer 'yes' at the prompt since the database you created above should be empty.
  
* Run script/mediawords_server.pl.  This should start up the web server.
  If the command line returns no errors, go to http://localhost:3000 
  (or replace localhost with whatever host the system is on) to
  access the server.
  
* Walk through the instructions in README.tutorial to setup a source
  in the web app; download, extract, and tag its stories; and browse
  the results.

* Perform brilliant analysis, fix our broken code, document how the system
  works, and otherwise contribute to the project.

